import axios from 'axios';
import { createAsyncThunk } from '@reduxjs/toolkit';

const url = 'http://localhost:5000/posts';

// createAsyncThunk generates pending, fulfilled and rejected action types but the reducers are not generated by the slice and have to be added as extra reducers
export const getAllPosts = createAsyncThunk('posts/getAllPosts', async () => {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    console.log(error);
  }
});

export const createPost = createAsyncThunk(
  'posts/createPost',
  async (newPost) => {
    try {
      const response = await axios.post(url, newPost);
      return response.data;
    } catch (error) {
      console.log(error);
    }
  }
);

export const updatePost = createAsyncThunk(
  'posts/updatePost',
  async ({ id, updatedPost }, thunkAPI) => {
    //Always destructure the parameters you'd be getting when you call the function elsewhere because if you do not do that, createAsyncThunk would always take the 2nd parameter as thunkAPI which should not be so.
    try {
      const response = await axios.patch(`${url}/${id}`, updatedPost);
      return response.data;
    } catch (error) {
      console.log(error);
      return thunkAPI.rejectWithValue(error.response.data);
    }
  }
);

export const deletePost = createAsyncThunk(
  'posts/deletePost',
  async (id, thunkAPI) => {
    try {
      await axios.delete(`${url}/${id}`);
      return id; // Return the id of the deleted post
    } catch (error) {
      console.log(error);
      return thunkAPI.rejectWithValue(error.response.data); // Handle the error and reject the promise
    }
  }
);

export const likePost = createAsyncThunk(
  'posts/likePost',
  async (id, thunkAPI) => {
    try {
      const response = await axios.patch(`${url}/${id}/likePost`);
      return response.data;
    } catch (error) {
      console.log(error);
      return thunkAPI.rejectWithValue(error.response.data); // Handle the error and reject the promise
    }
  }
);
